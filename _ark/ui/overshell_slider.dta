{new
   UIPanel
   options_milo_panel
   (file
      "options/options_audio.milo")
   (focus background_music.btn)
   (enter
	  {background.sld set_num_steps 41} ;number of steps for note speed slider
      {crowd.sld set_num_steps 31} ;number of steps for song speed slider
      {sfx.sld set_num_steps 60} ;number of steps for venue fps slider
	  {background.sld set_current {int {+ 0.5 {/ {+ {- $trackspeed 1} 0.5} 0.05}}}} ;set note speed slider based on current value
      {crowd.sld set_current {int {+ 0.5 {/ {- $speedmod 1} 0.05}}}} ;set song speed slider based on current value
      {sfx.sld set_current {int {- $emulatefps 1}}} ;set FPS slider based on current value
	  {background_music.btn set text_token {sprintf {localize trackspeed_msg} {int {+ 0.5 {* $trackspeed 100}}}}} ;set note speed msg
	  {crowd.btn set text_token {sprintf {localize speed_msg} {int {+ 0.5 {* $speedmod 100}}}}} ;set song speed msg
	  {sfx.btn set text_token {sprintf {localize fps_msg} {int $emulatefps}}}  ;set venue fps msg
      {audio_options.lbl set text_token milosliderlbl}
      {karaoke.btn set_showing FALSE}
      {$this disable karaoke.btn}
	  {$this update_all_from_profile})
   (save_load_all_complete_msg
      {$this update_all_from_profile})
   (TRANSITION_COMPLETE_MSG
      {$this
         update_helpbar
         {$this focus_name}}
      kDataUnhandled)
   (FOCUS_MSG
      {$this update_helpbar $new_focus})
   (SCROLL_SELECT_MSG
      {$this on_slider_change $component})
   (SCROLL_MSG
      {$this on_slider_change $component})
   (SELECT_MSG
      #ifdef HX_XBOX {demo_launcher_panel forward_sfx} #endif
      {switch
         $component
         (background_music.btn
            {background.sld store}
            {$this set_focus background.sld})
         (crowd.btn
            {crowd.sld store}
            {$this set_focus crowd.sld})
         (sfx.btn
            {sfx.sld store}
            {$this set_focus sfx.sld})}
       {play_instr_sfx $user button_select})
   (SCROLL_MSG
      #ifdef HX_XBOX {demo_launcher_panel scroll_sfx} #endif
   )
   (BUTTON_DOWN_MSG
      #ifdef HX_XBOX {demo_launcher_panel back_sfx} #endif
      {switch
         {$this focus_name}
         (background.sld
            {switch
               $action
               (kAction_Confirm
                  {background.sld confirm}
                  {play_instr_sfx $user button_select}
                  {$this set_focus background_music.btn})
               (kAction_Cancel
                  {background.sld undo $user}
                  {$this set_focus background_music.btn})
               kDataUnhandled})
         (crowd.sld
            {switch
               $action
               (kAction_Confirm
                  {crowd.sld confirm}
                  {play_instr_sfx $user button_select}
                  {$this set_focus crowd.btn})
               (kAction_Cancel
                  {crowd.sld undo $user}
                  {$this set_focus crowd.btn})
               kDataUnhandled})
         (sfx.sld
            {switch
               $action
               (kAction_Confirm
                  {sfx.sld confirm}
                  {play_instr_sfx $user button_select}
                  {$this set_focus sfx.btn})
               (kAction_Cancel
                  {sfx.sld undo $user}
                  {$this set_focus sfx.btn})
               kDataUnhandled})
      }
      {if_else {== $action kAction_Cancel}
         {do {ui pop_screen} {meta music_start}}
         kDataUnhandled
      }
   )
   (on_slider_change
      ($component)
      {switch
         $component
         (background.sld
            {do {set $component current}}
            {$this set_speeds})
         (crowd.sld
            {do {set $component current}}
            {$this set_speeds})
         (sfx.sld
            {do {set $component current}}
            {$this set_speeds})})
   (update_all_from_profile
      {$this
         iterate
         UISlider
         $s
         {$this update_from_profile $s}})
   (update_from_profile
      ($component)
      {switch
         $component
         (background.sld
            {$component
               set_current
               {int {+ 0.5 {/ {+ {- $trackspeed 1} 0.5} 0.05}}}})
         (crowd.sld
            {$component
               set_current
               {int {+ 0.5 {/ {- $speedmod 1} 0.05}}}})
         (sfx.sld
            {$component
               set_current
               {int {- $emulatefps 1}}})})
	(set_speeds
         {do
            {set $trackspeed {- {+ 1 {* {background.sld current} 0.05}} 0.5}}
            {set $speedmod
               {+ 1 {* {crowd.sld current} 0.05}}}
            {set $emulatefps
               {+ 1 {sfx.sld current}}}
         {set $leaderspeed $speedmod}}
         {set $leaderspeed $speedmod}
         {$this display_trackspeed_msg $trackspeed}
         {$this display_speed_msg $speedmod}
         {$this display_fps_msg $emulatefps})
   (display_trackspeed_msg
      ($tspd)
      {background_music.btn set text_token {sprintf {localize trackspeed_msg} {int {+ 0.5 {* $tspd 100}}}}})
   (display_speed_msg
      ($mspd)
     {crowd.btn set text_token {sprintf {localize speed_msg} {int {+ 0.5 {* $mspd 100}}}}})
   (display_fps_msg
      ($fps)
     {sfx.btn set text_token {sprintf {localize fps_msg} {int $fps}}}) ;don't add 1 here because this is being fed the actual fps
   (update_helpbar
      ($new_focus)
      {switch
         $new_focus
         ((background_music.btn crowd.btn sfx.btn voicechat.btn)
            {helpbar
               set_config
               ((cancel helpbar_back)
                  (confirm helpbar_changesetting))})
         ((background.sld crowd.sld sfx.sld voicechat.sld)
            {helpbar
               set_config
               ((cancel helpbar_cancel)
                  (confirm helpbar_confirmsetting))})})}
{new
   UIPanel
   overshell_blank_panel
   (file options/practice_sel_section.milo)
   (focus sel_section.lst)
   (enter
      {sel_section.lst set_showing FALSE}
      {$this iterate UILabel $j {$j set_showing FALSE}}
   )
}
{new
   UIPanel
   options_color_panel
   (file
      "options/options_color.milo")
   (focus instruments.btn)
   (load
;      {content_mgr start_refresh}
;      {content_loading_panel allowed_to_show TRUE}
   kDataUnhandled) ;prevent softlock on screen entry while also preventing it from waiting to "load additional content"
   (finish_load
;      {content_loading_panel allowed_to_show FALSE}
   kDataUnhandled)
   (is_loaded
;      {content_mgr refresh_done}
   kDataUnhandled)
   (enter
      {$this set_showing TRUE}
      {options_audio.grp set_local_pos_index 2 15}
      {audio_options.lbl set all_caps TRUE}
      {audio_options.lbl set text_size 50}
      {audio_options.lbl set width 400}
      {audio_options.lbl set_local_pos_index 2 170}
      {instruments.sld set_num_steps 5} ;slot 1
      {background.sld set_num_steps 5} ;slot 2
      {vocal_track.sld set_num_steps 5} ;slot 3
      {crowd.sld set_num_steps 5} ;slot 4
      {sfx.sld set_num_steps 5} ;slot 5
      {instruments.sld set_current $slot1_color} ;set slider 1 to slot 1 color value
      {background.sld set_current $slot2_color} ;set slider 2 to slot 2 color value
      {vocal_track.sld set_current $slot3_color} ;set slider 3 to slot 3 color value
      {crowd.sld set_current $slot4_color} ;set slider 4 to slot 4 color value
      {sfx.sld set_current $slot5_color} ;set slider 5 to slot 5 color value
      {background_music.btn get_local_pos $labelpos_x $labelpos_y $labelpos_z}
      {background_music.btn set_local_pos {- $labelpos_x 13.2} $labelpos_y $labelpos_z} ;fix the fucking text position so it doesn't look ugly, for real this time
      {instruments.btn set text_token {localize {sprintf "gemcolor_%i" $slot1_color}}} ;update text for button 1
      {background_music.btn set text_token {localize {sprintf "gemcolor_%i" $slot2_color}}} ;update text for button 2
      {vocal_track.btn set text_token {localize {sprintf "gemcolor_%i" $slot3_color}}} ;update text for button 3
      {crowd.btn set text_token {localize {sprintf "gemcolor_%i" $slot4_color}}} ;update text for button 4
      {sfx.btn set text_token {localize {sprintf "gemcolor_%i" $slot5_color}}} ;update text for button 5
   )
   (exit
   {set $leaderspeed $speedmod}
   {do
      {set $leaderspeed $speedmod}})
   (TRANSITION_COMPLETE_MSG
      {$this
         update_helpbar
         {$this focus_name}}
      kDataUnhandled)
   (FOCUS_MSG
      {$this update_helpbar $new_focus})
   (SCROLL_SELECT_MSG
      {$this on_slider_change $component})
   (SCROLL_MSG
      {$this on_slider_change $component})
   (SCROLL_MSG
      #ifdef HX_XBOX {demo_launcher_panel scroll_sfx} #endif
   )
   (SELECT_MSG
      #ifdef HX_XBOX {demo_launcher_panel forward_sfx} #endif
      {switch
         $component
         (instruments.btn
            {instruments.sld store}
            {$this set_focus instruments.sld})
         (background_music.btn
            {background.sld store}
            {$this set_focus background.sld})
         (vocal_track.btn
            {vocal_track.sld store}
            {$this set_focus vocal_track.sld})
         (crowd.btn
            {crowd.sld store}
            {$this set_focus crowd.sld})
         (sfx.btn
            {sfx.sld store}
            {$this set_focus sfx.sld})
      })
   (BUTTON_DOWN_MSG
      #ifdef HX_XBOX {demo_launcher_panel back_sfx} #endif
      {switch
         {$this focus_name}
         (vocal_track.sld
            {switch
               $action
               (kAction_Confirm
                  {vocal_track.sld confirm}
                  {$this set_focus vocal_track.btn})
               (kAction_Cancel
                  {vocal_track.sld undo $player}
                  {$this set_focus vocal_track.btn})
               kDataUnhandled})
         (instruments.sld
            {switch
               $action
               (kAction_Confirm
                  {instruments.sld confirm}
                  {$this set_focus instruments.btn})
               (kAction_Cancel
                  {instruments.sld undo $player}
                  {$this set_focus instruments.btn})
               kDataUnhandled})
         (background.sld
            {switch
               $action
               (kAction_Confirm
                  {background.sld confirm}
                  {$this set_focus background_music.btn})
               (kAction_Cancel
                  {background.sld undo $player}
                  {$this set_focus background_music.btn})
               kDataUnhandled})
         (crowd.sld
            {switch
               $action
               (kAction_Confirm
                  {crowd.sld confirm}
                  {$this set_focus crowd.btn})
               (kAction_Cancel
                  {crowd.sld undo $player}
                  {$this set_focus crowd.btn})
               kDataUnhandled})
         (sfx.sld
            {switch
               $action
               (kAction_Confirm
                  {sfx.sld confirm}
                  {$this set_focus sfx.btn})
               (kAction_Cancel
                  {sfx.sld undo $player}
                  {$this set_focus sfx.btn})
               kDataUnhandled})
         {if_else {== $action kAction_Cancel}
            {do {ui pop_screen} {$this set_showing FALSE}}
            kDataUnhandled}
      }
   )
   (on_slider_change
      ($component)
      {switch
         $component
         (instruments.sld
            {do 
               {set $component current}
               {set $slot1_color {$this current}} ;set color to slider value
               {instruments.btn set text_token {localize {sprintf "gemcolor_%i" $slot1_color}}} ;update text for button 1
            }
         )
         (background.sld
            {do 
               {set $component current}
               {set $slot2_color {$this current}} ;set color to slider value
               {background_music.btn set text_token {localize {sprintf "gemcolor_%i" $slot2_color}}} ;update text for button 2

            }
         )
         (vocal_track.sld
            {do
               {set $component current}
               {set $slot3_color {$this current}} ;set color to slider value
               {vocal_track.btn set text_token {localize {sprintf "gemcolor_%i" $slot3_color}}} ;update text for button 3
            }
         )
         (crowd.sld
            {do
               {set $component current}
               {set $slot4_color {$this current}} ;set color to slider value
               {crowd.btn set text_token {localize {sprintf "gemcolor_%i" $slot4_color}}} ;update text for button 4
            }
         )
         (sfx.sld
            {do
               {set $component current}
               {set $slot5_color {$this current}} ;set color to slider value
               {sfx.btn set text_token {localize {sprintf "gemcolor_%i" $slot5_color}}} ;update text for button 5
            }
         )
      })
   (update_helpbar
      ($new_focus)
      {switch
         $new_focus
         ((vocal_track.btn background_music.btn crowd.btn instruments.btn sfx.btn)
            {helpbar
               set_config
               ((cancel helpbar_back)
                  (confirm helpbar_changesetting))})
         ((vocal_track.sld background.sld crowd.sld instruments.sld sfx.sld)
            {helpbar
               set_config
               ((cancel helpbar_cancel)
                  (confirm helpbar_confirmsetting))})}
   )
}
{new
   UIScreen
   options_milo_screen
   (panels meta overshell_blank_panel options_milo_panel)
   (focus options_milo_panel)
   (helpbar
      (helpbar_back helpbar_select))}
{new
   UIScreen
   options_color_screen
   (panels meta overshell_blank_panel options_color_panel)
   (focus options_color_panel)
   (helpbar
      (helpbar_back helpbar_select))}